import java.util.Scanner;

public class HW3 {
    public static void main(String[] args){

        // логическиe операции "&&", "||", "!" (и, или, отрицание)

        Scanner in = new Scanner(System.in);

        System.out.println("Введите два числа на проверку их четности:");
        int num_1 = in.nextInt();
        int num_2 = in.nextInt();
        if (num_1%2==0 && num_2%2==0){
            System.out.println("Оба числа четные!");
        }
        else {
            if (num_1 % 2 != 0 && num_2 % 2 != 0) {
                System.out.println("Оба числа нечетные!");
            }
            if ((num_1 % 2 == 0 && num_2 % 2 != 0) || (num_1 % 2 != 0 && num_2 % 2 == 0)) {
                System.out.println("Четно только одно из чисел!");
            }
        }

        // тернарыне операции "x < y ? x : y"
        // возвращает значение x, если условие x < y истинно, и значение y в противном случае

        System.out.println("Введите два числа для проверки тернарной операции:");
        int x = in.nextInt();
        int y = in.nextInt();

        int result = (x < y) ? x : y;

        System.out.println("Результат: " + result);

        // поразрядные логические операции & | ^ ~

        int a = 5;     // 0101 в двоичной системе
        int b = 1;     // 0011 в двоичной системе
        int res_1 = a & b;  // Результат: 0001 (1 в двоичной системе) (1 - если одинаковы биты)
        int res_2 = a | b;  // Результат: 0111 (7 в двоичной системе) (1 - если хотя бы один бит = 1)
        int res_3 = a ^ b;  // Результат: 0110 (6 в двоичной системе) (1 - если биты разные)
        int res_4 = ~a;  // Результат: 1010 (отрицательное число в дополнительном коде)

        // операции сдвига >> << >>>
        int number_1 = 10;       // 0000 0000 0000 0000 0000 0000 0000 1010
        int shifted_1 = number_1 >> 2;  // Результат: 0000 0000 0000 0000 0000 0000 0000 0010 (2)

        int number_2 = 10;      // 0000 0000 0000 0000 0000 0000 0000 1010
        int shifted_2 = number_2 << 2; // Результат: 0000 0000 0000 0000 0000 0000 0010 1000 (40)

        int number_3 = -10;      // 1111 1111 1111 1111 1111 1111 1111 0110 (-10 в двоичном дополнительном коде)
        int shifted_3 = number_3 >>> 2; // Результат: 0011 1111 1111 1111 1111 1111 1111 1101 (1073741821)

    }
}